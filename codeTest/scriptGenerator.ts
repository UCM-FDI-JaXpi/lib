// script-generate-code.ts
// import a library for file writing
import * as fs from 'fs';

// verbs that we use to create functions autogenerated
// const verbDefinitions1 = [
//   { verb: 'jumped', verbId: 'https://github.com/UCM-FDI-JaXpi/lib/jumped', definition: '', descrEn: '', descrEs: '' },
//   { verb: 'died', objectId: 'https://un-ejemplo/died' }
//   // Agrega más definiciones según sea necesario...
// ];

type verbInfo = {
	descriptionEn: string;
	descriptionEs: string;
  verbId: string;
  name: string;
  objectId?: string;
};


const verbDefinitions = new Map<string,verbInfo>([
	["clicked",{verbId:"Interacted Object", name: "", descriptionEn: "Indicates that the actor has clicked on the object.", descriptionEs: "Indica que el actor ha hecho click en el objeto."}],
	["interacted",{verbId:"", name: "", descriptionEn: "", descriptionEs: ""}],
  ["jumped", {verbId: "https://github.com/UCM-FDI-JaXpi/lib/jumped", name: "", descriptionEn: "", descriptionEs: "" }],
  ["cancelled", {verbId: "https://github.com/UCM-FDI-JaXpi/lib/cancelled", objectId: "http://adlnet.gov/expapi/activities/example" , name: "Example Activity", descriptionEn: "Indicates that the actor has canceled the object. For example, canceling a mission.", descriptionEs: "Indica que el actor ha cancelado el objeto. Por ejemplo, cancelar una misión."}],
	["other",{verbId:"", name: "", descriptionEn: "", descriptionEs: ""}]
]);



interface VerbUrlMap {
  [verbId: string]: string;
}

const verbUrlMap: VerbUrlMap = {
  "cancelled": "https://github.com/UCM-FDI-JaXpi/lib/traces/cancelled",
  "achieved": "https://github.com/UCM-FDI-JaXpi/lib/traces/achieved",
  "combined": "https://github.com/UCM-FDI-JaXpi/lib/traces/combined",
  // Agregar más elementos según sea necesario
};









// this function returns a string with the class with a method for each xapi trace 
function generateClassWithFunctions(definitions: Map<string,verbInfo>): string {
  const methods = Array.from(definitions.entries()).map(([key, def]) =>  ` ${key}() { 
    
    const statement = 
    {
      "actor": {
          "mbox": "mailto:player@gmail.com",
          "name": "Player",
          "objectType": "Agent"
      },

      "verb": {
          "id": "${def.verbId}",
          "display": {
              "en-US": "${key}"
          }
      },

      "object": {
          "id": "${def.objectId}",
          "definition": {
              "name": {
                  "en-US": "${def.name}"
              },
              "description": {
                  "en-US": "${def.descriptionEn}",
                  "es": "${def.descriptionEs}"
              }
          },
          "objectType": "Activity"
      }
    };

    enviar(verbURLMap[verbo]);

    console.log(statement);
    
    //enviar a server

   }`);
   
  return `export class GeneratedVerbs {\n${methods.join('\n')}\n}`;
}

// finally we write the new code on a script that we can use
const generatedCode = generateClassWithFunctions(verbDefinitions);
fs.writeFileSync('generated-functions.ts', generatedCode);